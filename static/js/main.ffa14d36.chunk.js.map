{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","card","name","email","id","className","src","alt","CardList","cardArray","map","user","index","Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","padding","children","ErrorBoundary","state","hasError","info","this","setState","Component","App","onRequestRobots","onSearchChange","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ffa14d36.chunk.js","sourcesContent":["import {\n    CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants'\n\nconst initialStateSearch = {\n    searchField: ''\n}   \n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nexport const requestRobots = (state=initialStateRobots, action= {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({} ,state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({} ,state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false})\n        default:\n            return state;\n    }\n}","import React from 'react'\n\nconst card = ({name, email ,id}) => {\n    return(\n        <div className=\"bg-light-green dib tc br3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"></img>\n            <h2 className=\"tc\">{ name }</h2>\n            <p>{ email }</p>\n        </div>\n    );\n\n}\n\nexport default card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    const cardArray = robots.map((user, index) => {\n        return (\n            <Card \n             key={index} \n             id={robots[index].id} \n             name={robots[index].name} \n             email={robots[index].email}\n            />)\n    })\n\n    return(\n        <div>\n            { cardArray }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return ( \n        <div>\n        <input\n            className=\"pa3 ba b --green bg-lightest-blue\" \n            type = \"search\" \n            placeholder = \"search robots\" \n            onChange={searchChange}\n            />\n         </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll',border: '0px solid',height: '700px',padding: '10px'}}    >\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error ,info) {\n        this.setState({ hasError : true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Opps...  That is not good </h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport CardList from '../components/CardList';\nimport { setSearchField, requestRobots} from \"../actions\";\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport './App.css';\n\n\nconst mapStateToProps = state => {\n    return{\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    componentDidMount()\n    {\n        this.props.onRequestRobots();\n    } \n\n    render() {                  \n        \n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filterRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n\n        return isPending?\n        ( \n            <div className = \"tc\" >\n            <h1 className=\"f1\"> RoboFriends </h1>\n            <SearchBox searchChange = { onSearchChange } /> \n            <h1>Loading...</h1>\n            </div>\n        ) :\n        ( \n            <div className = \"tc\" >\n            <h1 className=\"f1\"> RoboFriends </h1>\n            <SearchBox searchChange = { onSearchChange } /> \n            <Scroll>\n                <ErrorBoundary>\n                    <CardList robots = { filterRobots } /> \n                </ErrorBoundary>\n            </Scroll>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants'\n\nexport const setSearchField = (text) => {\n    return{\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n}\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD' ;\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunkMiddleware    from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport { searchRobots, requestRobots} from \"./reducers\";\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))  //connect\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root') \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}