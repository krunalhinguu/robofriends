{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["card","name","email","id","className","src","alt","CardList","robots","cardArray","map","user","index","Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.08f29ee2.chunk.js","sourcesContent":["import React from 'react'\n\nconst card = ({name, email ,id}) => {\n    return(\n        <div className=\"bg-light-green dib tc br3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"></img>\n            <h2 className=\"tc\">{ name }</h2>\n            <p>{ email }</p>\n        </div>\n    );\n\n}\n\nexport default card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    const cardArray = robots.map((user, index) => {\n        return (\n            <Card \n             key={index} \n             id={robots[index].id} \n             name={robots[index].name} \n             email={robots[index].email}\n            />)\n    })\n\n    return(\n        <div>\n            { cardArray }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return ( \n        <div>\n        <input\n            className=\"pa3 ba b --green bg-lightest-blue\" \n            type = \"search\" \n            placeholder = \"search robots\" \n            onChange={searchChange}\n            />\n         </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    console.log(props);\n    return (\n        <div style={{overflowY: 'scroll',border: '5px solid black',height: '800px'}}    >\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error ,info) {\n        this.setState({ hasError : true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Opps...  That is not good </h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport './App.css'\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount()\n    {\n       fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(response => response.json())\n            .then(users => this.setState({robots: users}));\n    } \n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    }\n\n    render() {          \n\n        const {robots, searchfield} = this.state ;\n        const filterRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n\n        return !robots.length ?\n        ( \n            <div className = \"tc\" >\n            <h1 className=\"f1\"> RoboFriends </h1>\n            <SearchBox searchChange = { this.onSearchChange } /> \n            <h1>Loading...</h1>\n            </div>\n        ) :\n        ( \n            <div className = \"tc\" >\n            <h1 className=\"f1\"> RoboFriends </h1>\n            <SearchBox searchChange = { this.onSearchChange } /> \n            <Scroll>\n                <ErrorBoundary>\n                    <CardList robots = { filterRobots } /> \n                </ErrorBoundary>\n            </Scroll>\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}